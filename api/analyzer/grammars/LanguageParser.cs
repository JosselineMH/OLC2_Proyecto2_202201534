//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		INT=60, BOOL=61, FLOAT=62, STRING=63, RUNE=64, ID=65, WS=66, COMENTARIOLINEA=67, 
		COMENTARIOMULTIL=68;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_dclFuera = 2, RULE_declaracionVariable = 3, 
		RULE_declaracionFuncForanea = 4, RULE_parametros = 5, RULE_tipoFunc = 6, 
		RULE_slice = 7, RULE_elementosSlice = 8, RULE_elementoSlice = 9, RULE_structDecl = 10, 
		RULE_atributoStruct = 11, RULE_sentencia = 12, RULE_stmtCase = 13, RULE_stmtDefault = 14, 
		RULE_forInit = 15, RULE_expresion = 16, RULE_atributoInstancia = 17, RULE_call = 18, 
		RULE_args = 19, RULE_tipoDeclaracion = 20;
	public static readonly string[] ruleNames = {
		"program", "dcl", "dclFuera", "declaracionVariable", "declaracionFuncForanea", 
		"parametros", "tipoFunc", "slice", "elementosSlice", "elementoSlice", 
		"structDecl", "atributoStruct", "sentencia", "stmtCase", "stmtDefault", 
		"forInit", "expresion", "atributoInstancia", "call", "args", "tipoDeclaracion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func main()'", "'{'", "'}'", "';'", "'var'", "'='", "':='", "'func'", 
		"'('", "')'", "'['", "']'", "','", "'type'", "'struct'", "'fmt.Println('", 
		"'if'", "'else'", "'switch'", "'for'", "'range'", "'break'", "'continue'", 
		"'return'", "'case'", "':'", "'default'", "'strconv.Atoi('", "'strconv.ParseFloat('", 
		"'reflect.TypeOf('", "'slices.Index('", "'strings.Join('", "'len('", "'append('", 
		"'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'.'", "'+='", "'-='", 
		"'nil'", "'int'", "'float64'", "'string'", "'bool'", "'rune'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"INT", "BOOL", "FLOAT", "STRING", "RUNE", "ID", "WS", "COMENTARIOLINEA", 
		"COMENTARIOMULTIL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclFueraContext[] dclFuera() {
			return GetRuleContexts<DclFueraContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclFueraContext dclFuera(int i) {
			return GetRuleContext<DclFueraContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1152921504606847497L) != 0)) {
					{
					{
					State = 42;
					dclFuera();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 50;
			Match(T__0);
			State = 51;
			Match(T__1);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -283726742223924535L) != 0)) {
				{
				{
				State = 52;
				dcl();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionFuncForaneaContext declaracionFuncForanea() {
			return GetRuleContext<DeclaracionFuncForaneaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl() {
			return GetRuleContext<StructDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				declaracionVariable();
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 61;
					Match(T__3);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				declaracionFuncForanea();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65;
				structDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				sentencia();
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 67;
					Match(T__3);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclFueraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionFuncForaneaContext declaracionFuncForanea() {
			return GetRuleContext<DeclaracionFuncForaneaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclContext structDecl() {
			return GetRuleContext<StructDeclContext>(0);
		}
		public DclFueraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dclFuera; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDclFuera(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclFueraContext dclFuera() {
		DclFueraContext _localctx = new DclFueraContext(Context, State);
		EnterRule(_localctx, 4, RULE_dclFuera);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				declaracionVariable();
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 73;
					Match(T__3);
					}
				}

				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				declaracionFuncForanea();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				structDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionVariableContext : ParserRuleContext {
		public DeclaracionVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionVariable; } }
	 
		public DeclaracionVariableContext() { }
		public virtual void CopyFrom(DeclaracionVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionSliceContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceContext slice() {
			return GetRuleContext<SliceContext>(0);
		}
		public DeclaracionSliceContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionPorDefectoContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		public DeclaracionPorDefectoContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionExplicitaContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionExplicitaContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionImplicitaContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionImplicitaContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionImplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionVariableContext declaracionVariable() {
		DeclaracionVariableContext _localctx = new DeclaracionVariableContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracionVariable);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new DeclaracionExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(T__4);
				State = 81;
				Match(ID);
				State = 82;
				tipoDeclaracion();
				State = 83;
				Match(T__5);
				State = 84;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new DeclaracionPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(T__4);
				State = 87;
				Match(ID);
				State = 88;
				tipoDeclaracion();
				}
				break;
			case 3:
				_localctx = new DeclaracionImplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				Match(ID);
				State = 90;
				Match(T__6);
				State = 91;
				expresion(0);
				}
				break;
			case 4:
				_localctx = new DeclaracionSliceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 92;
				slice();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionFuncForaneaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public DeclaracionFuncForaneaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionFuncForanea; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionFuncForanea(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionFuncForaneaContext declaracionFuncForanea() {
		DeclaracionFuncForaneaContext _localctx = new DeclaracionFuncForaneaContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaracionFuncForanea);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(T__7);
			State = 96;
			Match(ID);
			State = 97;
			Match(T__8);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 98;
				parametros();
				}
			}

			State = 101;
			Match(T__9);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1116892707587883008L) != 0)) {
				{
				State = 102;
				tipoDeclaracion();
				}
			}

			State = 105;
			Match(T__1);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -283726742223924535L) != 0)) {
				{
				{
				State = 106;
				dcl();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoFuncContext[] tipoFunc() {
			return GetRuleContexts<TipoFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoFuncContext tipoFunc(int i) {
			return GetRuleContext<TipoFuncContext>(i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 10, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 115;
				Match(T__10);
				State = 116;
				Match(T__11);
				}
			}

			State = 119;
			tipoFunc();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 120;
				Match(T__12);
				State = 121;
				Match(ID);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 122;
					Match(T__10);
					State = 123;
					Match(T__11);
					}
				}

				State = 126;
				tipoFunc();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public TipoFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoFuncContext tipoFunc() {
		TipoFuncContext _localctx = new TipoFuncContext(Context, State);
		EnterRule(_localctx, 12, RULE_tipoFunc);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				tipoDeclaracion();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceContext : ParserRuleContext {
		public SliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice; } }
	 
		public SliceContext() { }
		public virtual void CopyFrom(SliceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionSliceVacioContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		public DeclaracionSliceVacioContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceVacio(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionSliceMultidimensionalContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementosSliceContext elementosSlice() {
			return GetRuleContext<ElementosSliceContext>(0);
		}
		public DeclaracionSliceMultidimensionalContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceMultidimensional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionSliceValoresContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionSliceValoresContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceValores(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionSliceCopiaContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		public DeclaracionSliceCopiaContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceCopia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceContext slice() {
		SliceContext _localctx = new SliceContext(Context, State);
		EnterRule(_localctx, 14, RULE_slice);
		int _la;
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new DeclaracionSliceValoresContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(ID);
				State = 137;
				Match(T__6);
				State = 138;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new DeclaracionSliceVacioContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(T__4);
				State = 140;
				Match(ID);
				State = 141;
				Match(T__10);
				State = 142;
				Match(T__11);
				State = 143;
				tipoDeclaracion();
				}
				break;
			case 3:
				_localctx = new DeclaracionSliceCopiaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 144;
				Match(ID);
				State = 145;
				Match(T__5);
				State = 146;
				Match(ID);
				}
				break;
			case 4:
				_localctx = new DeclaracionSliceMultidimensionalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 147;
				Match(ID);
				State = 148;
				Match(T__6);
				State = 149;
				Match(T__10);
				State = 150;
				Match(T__11);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 151;
					Match(T__10);
					State = 152;
					Match(T__11);
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__10 );
				State = 157;
				tipoDeclaracion();
				State = 158;
				Match(T__1);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 159;
					elementosSlice();
					}
				}

				State = 162;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementosSliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementoSliceContext[] elementoSlice() {
			return GetRuleContexts<ElementoSliceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementoSliceContext elementoSlice(int i) {
			return GetRuleContext<ElementoSliceContext>(i);
		}
		public ElementosSliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementosSlice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementosSlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementosSliceContext elementosSlice() {
		ElementosSliceContext _localctx = new ElementosSliceContext(Context, State);
		EnterRule(_localctx, 16, RULE_elementosSlice);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			elementoSlice();
			State = 171;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 167;
					Match(T__12);
					State = 168;
					elementoSlice();
					}
					} 
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 174;
				Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementoSliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementosSliceContext elementosSlice() {
			return GetRuleContext<ElementosSliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ElementoSliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementoSlice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementoSlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementoSliceContext elementoSlice() {
		ElementoSliceContext _localctx = new ElementoSliceContext(Context, State);
		EnterRule(_localctx, 18, RULE_elementoSlice);
		int _la;
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(T__1);
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 178;
					elementosSlice();
					}
				}

				State = 181;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(T__1);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 141898572902170629L) != 0)) {
					{
					State = 183;
					expresion(0);
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 184;
						Match(T__12);
						State = 185;
						expresion(0);
						}
						}
						State = 190;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 193;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtributoStructContext[] atributoStruct() {
			return GetRuleContexts<AtributoStructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtributoStructContext atributoStruct(int i) {
			return GetRuleContext<AtributoStructContext>(i);
		}
		public StructDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclContext structDecl() {
		StructDeclContext _localctx = new StructDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_structDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(T__13);
			State = 197;
			Match(ID);
			State = 198;
			Match(T__14);
			State = 199;
			Match(T__1);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 200;
				atributoStruct();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtributoStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoFuncContext[] tipoFunc() {
			return GetRuleContexts<TipoFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoFuncContext tipoFunc(int i) {
			return GetRuleContext<TipoFuncContext>(i);
		}
		public AtributoStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atributoStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtributoStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtributoStructContext atributoStruct() {
		AtributoStructContext _localctx = new AtributoStructContext(Context, State);
		EnterRule(_localctx, 22, RULE_atributoStruct);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(ID);
			State = 209;
			tipoFunc();
			State = 214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 210;
					Match(ID);
					State = 211;
					tipoFunc();
					}
					} 
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
	 
		public SentenciaContext() { }
		public virtual void CopyFrom(SentenciaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinueStmtContext : SentenciaContext {
		public ContinueStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtCaseContext[] stmtCase() {
			return GetRuleContexts<StmtCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtCaseContext stmtCase(int i) {
			return GetRuleContext<StmtCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtDefaultContext stmtDefault() {
			return GetRuleContext<StmtDefaultContext>(0);
		}
		public SwitchStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public PrintStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		public IfStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ExprStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : SentenciaContext {
		public BreakStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForRangeStmtContext : SentenciaContext {
		public IToken indice;
		public IToken valor;
		public IToken ident;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		public ForRangeStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForWhileStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public ForWhileStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public ForStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ReturnStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 24, RULE_sentencia);
		int _la;
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(T__15);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 141898572902170629L) != 0)) {
					{
					State = 219;
					expresion(0);
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 220;
						Match(T__12);
						State = 221;
						expresion(0);
						}
						}
						State = 226;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 229;
				Match(T__9);
				}
				break;
			case 3:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 230;
				Match(T__1);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -283726742223924535L) != 0)) {
					{
					{
					State = 231;
					dcl();
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 237;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				Match(T__16);
				State = 240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 239;
					Match(T__8);
					}
					break;
				}
				State = 242;
				expresion(0);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 243;
					Match(T__9);
					}
				}

				State = 246;
				sentencia();
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 247;
					Match(T__17);
					State = 248;
					sentencia();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 251;
				Match(T__18);
				State = 253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 252;
					Match(T__8);
					}
					break;
				}
				State = 255;
				expresion(0);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 256;
					Match(T__9);
					}
				}

				State = 259;
				Match(T__1);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__24) {
					{
					{
					State = 260;
					stmtCase();
					}
					}
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__26) {
					{
					State = 266;
					stmtDefault();
					}
				}

				State = 269;
				Match(T__2);
				}
				break;
			case 6:
				_localctx = new ForWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 271;
				Match(T__19);
				State = 273;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 272;
					Match(T__8);
					}
					break;
				}
				State = 275;
				expresion(0);
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 276;
					Match(T__9);
					}
				}

				State = 279;
				sentencia();
				}
				break;
			case 7:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 281;
				Match(T__19);
				State = 283;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 282;
					Match(T__8);
					}
					break;
				}
				State = 285;
				forInit();
				State = 286;
				expresion(0);
				State = 287;
				Match(T__3);
				State = 288;
				expresion(0);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 289;
					Match(T__9);
					}
				}

				State = 292;
				sentencia();
				}
				break;
			case 8:
				_localctx = new ForRangeStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 294;
				Match(T__19);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 295;
					Match(T__8);
					}
				}

				State = 298;
				((ForRangeStmtContext)_localctx).indice = Match(ID);
				State = 299;
				Match(T__12);
				State = 300;
				((ForRangeStmtContext)_localctx).valor = Match(ID);
				State = 301;
				Match(T__6);
				State = 302;
				Match(T__20);
				State = 303;
				((ForRangeStmtContext)_localctx).ident = Match(ID);
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 304;
					Match(T__9);
					}
				}

				State = 307;
				sentencia();
				}
				break;
			case 9:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 308;
				Match(T__21);
				}
				break;
			case 10:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 309;
				Match(T__22);
				}
				break;
			case 11:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 310;
				Match(T__23);
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 311;
					expresion(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public StmtCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtCaseContext stmtCase() {
		StmtCaseContext _localctx = new StmtCaseContext(Context, State);
		EnterRule(_localctx, 26, RULE_stmtCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(T__24);
			State = 317;
			expresion(0);
			State = 318;
			Match(T__25);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -283726742223924535L) != 0)) {
				{
				{
				State = 319;
				dcl();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public StmtDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtDefaultContext stmtDefault() {
		StmtDefaultContext _localctx = new StmtDefaultContext(Context, State);
		EnterRule(_localctx, 28, RULE_stmtDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(T__26);
			State = 326;
			Match(T__25);
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & -283726742223924535L) != 0)) {
				{
				{
				State = 327;
				dcl();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 30, RULE_forInit);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				declaracionVariable();
				State = 334;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				expresion(0);
				State = 337;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignSliceContext : ExpresionContext {
		public ExpresionContext indice;
		public ExpresionContext valor;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AssignSliceContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalleeContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CalleeContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceLenFuncContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceLenFuncContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLenFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceLiteralContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SliceLiteralContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ParensContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicalOrContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public LogicalNotContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructAccessContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		public StructAccessContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public MulDivModContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmebbedFuncAtoiContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public EmebbedFuncAtoiContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmebbedFuncAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public NumberContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructAssignContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public StructAssignContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicalAndContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public EqualityContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceStringFuncJoinContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceStringFuncJoinContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceStringFuncJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BooleanContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAccessContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceAccessContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructInstanciaContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtributoInstanciaContext atributoInstancia() {
			return GetRuleContext<AtributoInstanciaContext>(0);
		}
		public StructInstanciaContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructInstancia(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AddSubContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVarContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AssignVarContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public RelationalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceMatrixAccessContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SliceMatrixAccessContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceMatrixAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmebbedFuncParseFloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public EmebbedFuncParseFloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmebbedFuncParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceFuncIndexContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceFuncIndexContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceFuncIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExpresionContext {
		public NilContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignSliceMultidimensionalContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AssignSliceMultidimensionalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignSliceMultidimensional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAppendFuncContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceAppendFuncContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAppendFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmebbedFuncTypeOfContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public EmebbedFuncTypeOfContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmebbedFuncTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegateContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementDecrementContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IncrementDecrementContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				_localctx = new EmebbedFuncAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 342;
				Match(T__27);
				State = 343;
				expresion(0);
				State = 344;
				Match(T__9);
				}
				break;
			case 2:
				{
				_localctx = new EmebbedFuncParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346;
				Match(T__28);
				State = 347;
				expresion(0);
				State = 348;
				Match(T__9);
				}
				break;
			case 3:
				{
				_localctx = new EmebbedFuncTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 350;
				Match(T__29);
				State = 351;
				expresion(0);
				State = 352;
				Match(T__9);
				}
				break;
			case 4:
				{
				_localctx = new SliceFuncIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 354;
				Match(T__30);
				State = 355;
				Match(ID);
				State = 356;
				Match(T__12);
				State = 357;
				expresion(0);
				State = 358;
				Match(T__9);
				}
				break;
			case 5:
				{
				_localctx = new SliceStringFuncJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 360;
				Match(T__31);
				State = 361;
				Match(ID);
				State = 362;
				Match(T__12);
				State = 363;
				expresion(0);
				State = 364;
				Match(T__9);
				}
				break;
			case 6:
				{
				_localctx = new SliceLenFuncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				Match(T__32);
				State = 367;
				expresion(0);
				State = 368;
				Match(T__9);
				}
				break;
			case 7:
				{
				_localctx = new SliceAppendFuncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				Match(T__33);
				State = 371;
				Match(ID);
				State = 372;
				Match(T__12);
				State = 373;
				expresion(0);
				State = 374;
				Match(T__9);
				}
				break;
			case 8:
				{
				_localctx = new SliceAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(ID);
				State = 377;
				Match(T__10);
				State = 378;
				expresion(0);
				State = 379;
				Match(T__11);
				}
				break;
			case 9:
				{
				_localctx = new SliceMatrixAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 381;
				Match(ID);
				State = 386;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 382;
						Match(T__10);
						State = 383;
						expresion(0);
						State = 384;
						Match(T__11);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 388;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 10:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 390;
				Match(T__34);
				State = 391;
				expresion(25);
				}
				break;
			case 11:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(T__35);
				State = 393;
				expresion(23);
				}
				break;
			case 12:
				{
				_localctx = new IncrementDecrementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				Match(ID);
				State = 395;
				((IncrementDecrementContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__48 || _la==T__49) ) {
					((IncrementDecrementContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				{
				_localctx = new StructAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 396;
				Match(ID);
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 397;
					Match(T__50);
					State = 398;
					Match(ID);
					}
					}
					State = 401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__50 );
				State = 403;
				Match(T__5);
				State = 404;
				expresion(15);
				}
				break;
			case 14:
				{
				_localctx = new AssignVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 405;
				Match(ID);
				State = 406;
				((AssignVarContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 13510798882111552L) != 0)) ) {
					((AssignVarContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 407;
				expresion(14);
				}
				break;
			case 15:
				{
				_localctx = new AssignSliceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 408;
				Match(ID);
				State = 409;
				Match(T__10);
				State = 410;
				((AssignSliceContext)_localctx).indice = expresion(0);
				State = 411;
				Match(T__11);
				State = 412;
				Match(T__5);
				State = 413;
				((AssignSliceContext)_localctx).valor = expresion(13);
				}
				break;
			case 16:
				{
				_localctx = new AssignSliceMultidimensionalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 415;
				Match(ID);
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 416;
					Match(T__10);
					State = 417;
					expresion(0);
					State = 418;
					Match(T__11);
					}
					}
					State = 422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__10 );
				State = 424;
				Match(T__5);
				State = 425;
				expresion(12);
				}
				break;
			case 17:
				{
				_localctx = new SliceLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 427;
				Match(T__10);
				State = 428;
				Match(T__11);
				State = 429;
				tipoDeclaracion();
				State = 430;
				Match(T__1);
				State = 431;
				expresion(0);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__12) {
					{
					{
					State = 432;
					Match(T__12);
					State = 433;
					expresion(0);
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 439;
				Match(T__2);
				}
				break;
			case 18:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 441;
				Match(BOOL);
				}
				break;
			case 19:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 442;
				Match(FLOAT);
				}
				break;
			case 20:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 443;
				Match(RUNE);
				}
				break;
			case 21:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 444;
				Match(STRING);
				}
				break;
			case 22:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 445;
				Match(INT);
				}
				break;
			case 23:
				{
				_localctx = new NilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 446;
				Match(T__53);
				}
				break;
			case 24:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 447;
				Match(ID);
				}
				break;
			case 25:
				{
				_localctx = new StructAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 448;
				Match(ID);
				State = 451;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 449;
						Match(T__50);
						State = 450;
						Match(ID);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 453;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 26:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 455;
				Match(T__8);
				State = 456;
				expresion(0);
				State = 457;
				Match(T__9);
				}
				break;
			case 27:
				{
				_localctx = new StructInstanciaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 459;
				Match(ID);
				State = 460;
				Match(T__1);
				State = 461;
				atributoInstancia();
				State = 462;
				Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 490;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 466;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 467;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 468;
						expresion(23);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 469;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 470;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__34 || _la==T__39) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 471;
						expresion(22);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 472;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 473;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985348833280L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 474;
						expresion(21);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 475;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 476;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__44 || _la==T__45) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 477;
						expresion(20);
						}
						break;
					case 5:
						{
						_localctx = new LogicalAndContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 478;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 479;
						((LogicalAndContext)_localctx).op = Match(T__46);
						State = 480;
						expresion(19);
						}
						break;
					case 6:
						{
						_localctx = new LogicalOrContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 481;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 482;
						((LogicalOrContext)_localctx).op = Match(T__47);
						State = 483;
						expresion(18);
						}
						break;
					case 7:
						{
						_localctx = new CalleeContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 484;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 486;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 485;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 488;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtributoInstanciaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AtributoInstanciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atributoInstancia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtributoInstancia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtributoInstanciaContext atributoInstancia() {
		AtributoInstanciaContext _localctx = new AtributoInstanciaContext(Context, State);
		EnterRule(_localctx, 34, RULE_atributoInstancia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(ID);
			State = 496;
			Match(T__25);
			State = 497;
			expresion(0);
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 498;
				Match(T__12);
				State = 499;
				Match(ID);
				State = 500;
				Match(T__25);
				State = 501;
				expresion(0);
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 36, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(T__8);
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 141898572902170629L) != 0)) {
				{
				State = 508;
				args();
				}
			}

			State = 511;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 38, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			expresion(0);
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 514;
				Match(T__12);
				State = 515;
				expresion(0);
				}
				}
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoDeclaracionContext : ParserRuleContext {
		public TipoDeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoDeclaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoDeclaracionContext tipoDeclaracion() {
		TipoDeclaracionContext _localctx = new TipoDeclaracionContext(Context, State);
		EnterRule(_localctx, 40, RULE_tipoDeclaracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1116892707587883008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 22);
		case 1: return Precpred(Context, 21);
		case 2: return Precpred(Context, 20);
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 24);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,68,524,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,5,0,44,
		8,0,10,0,12,0,47,9,0,3,0,49,8,0,1,0,1,0,1,0,5,0,54,8,0,10,0,12,0,57,9,
		0,1,0,1,0,1,1,1,1,3,1,63,8,1,1,1,1,1,1,1,1,1,3,1,69,8,1,3,1,71,8,1,1,2,
		1,2,3,2,75,8,2,1,2,1,2,3,2,79,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,94,8,3,1,4,1,4,1,4,1,4,3,4,100,8,4,1,4,1,4,3,4,104,
		8,4,1,4,1,4,5,4,108,8,4,10,4,12,4,111,9,4,1,4,1,4,1,5,1,5,1,5,3,5,118,
		8,5,1,5,1,5,1,5,1,5,1,5,3,5,125,8,5,1,5,5,5,128,8,5,10,5,12,5,131,9,5,
		1,6,1,6,3,6,135,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,4,7,154,8,7,11,7,12,7,155,1,7,1,7,1,7,3,7,161,8,7,1,
		7,1,7,3,7,165,8,7,1,8,1,8,1,8,5,8,170,8,8,10,8,12,8,173,9,8,1,8,3,8,176,
		8,8,1,9,1,9,3,9,180,8,9,1,9,1,9,1,9,1,9,1,9,5,9,187,8,9,10,9,12,9,190,
		9,9,3,9,192,8,9,1,9,3,9,195,8,9,1,10,1,10,1,10,1,10,1,10,5,10,202,8,10,
		10,10,12,10,205,9,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,213,8,11,10,11,
		12,11,216,9,11,1,12,1,12,1,12,1,12,1,12,5,12,223,8,12,10,12,12,12,226,
		9,12,3,12,228,8,12,1,12,1,12,1,12,5,12,233,8,12,10,12,12,12,236,9,12,1,
		12,1,12,1,12,3,12,241,8,12,1,12,1,12,3,12,245,8,12,1,12,1,12,1,12,3,12,
		250,8,12,1,12,1,12,3,12,254,8,12,1,12,1,12,3,12,258,8,12,1,12,1,12,5,12,
		262,8,12,10,12,12,12,265,9,12,1,12,3,12,268,8,12,1,12,1,12,1,12,1,12,3,
		12,274,8,12,1,12,1,12,3,12,278,8,12,1,12,1,12,1,12,1,12,3,12,284,8,12,
		1,12,1,12,1,12,1,12,1,12,3,12,291,8,12,1,12,1,12,1,12,1,12,3,12,297,8,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,306,8,12,1,12,1,12,1,12,1,12,
		1,12,3,12,313,8,12,3,12,315,8,12,1,13,1,13,1,13,1,13,5,13,321,8,13,10,
		13,12,13,324,9,13,1,14,1,14,1,14,5,14,329,8,14,10,14,12,14,332,9,14,1,
		15,1,15,1,15,1,15,1,15,1,15,3,15,340,8,15,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,387,8,16,11,
		16,12,16,388,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,400,8,16,
		11,16,12,16,401,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,4,16,421,8,16,11,16,12,16,422,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,435,8,16,10,16,12,16,438,
		9,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,
		452,8,16,11,16,12,16,453,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,465,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,487,8,16,11,16,12,16,488,
		5,16,491,8,16,10,16,12,16,494,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		5,17,503,8,17,10,17,12,17,506,9,17,1,18,1,18,3,18,510,8,18,1,18,1,18,1,
		19,1,19,1,19,5,19,517,8,19,10,19,12,19,520,9,19,1,20,1,20,1,20,0,1,32,
		21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,7,1,0,49,
		50,2,0,6,6,52,53,1,0,37,39,2,0,35,35,40,40,1,0,41,44,1,0,45,46,1,0,55,
		59,608,0,48,1,0,0,0,2,70,1,0,0,0,4,78,1,0,0,0,6,93,1,0,0,0,8,95,1,0,0,
		0,10,114,1,0,0,0,12,134,1,0,0,0,14,164,1,0,0,0,16,166,1,0,0,0,18,194,1,
		0,0,0,20,196,1,0,0,0,22,208,1,0,0,0,24,314,1,0,0,0,26,316,1,0,0,0,28,325,
		1,0,0,0,30,339,1,0,0,0,32,464,1,0,0,0,34,495,1,0,0,0,36,507,1,0,0,0,38,
		513,1,0,0,0,40,521,1,0,0,0,42,44,3,4,2,0,43,42,1,0,0,0,44,47,1,0,0,0,45,
		43,1,0,0,0,45,46,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,48,45,1,0,0,0,48,
		49,1,0,0,0,49,50,1,0,0,0,50,51,5,1,0,0,51,55,5,2,0,0,52,54,3,2,1,0,53,
		52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,
		55,1,0,0,0,58,59,5,3,0,0,59,1,1,0,0,0,60,62,3,6,3,0,61,63,5,4,0,0,62,61,
		1,0,0,0,62,63,1,0,0,0,63,71,1,0,0,0,64,71,3,8,4,0,65,71,3,20,10,0,66,68,
		3,24,12,0,67,69,5,4,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,71,1,0,0,0,70,60,
		1,0,0,0,70,64,1,0,0,0,70,65,1,0,0,0,70,66,1,0,0,0,71,3,1,0,0,0,72,74,3,
		6,3,0,73,75,5,4,0,0,74,73,1,0,0,0,74,75,1,0,0,0,75,79,1,0,0,0,76,79,3,
		8,4,0,77,79,3,20,10,0,78,72,1,0,0,0,78,76,1,0,0,0,78,77,1,0,0,0,79,5,1,
		0,0,0,80,81,5,5,0,0,81,82,5,65,0,0,82,83,3,40,20,0,83,84,5,6,0,0,84,85,
		3,32,16,0,85,94,1,0,0,0,86,87,5,5,0,0,87,88,5,65,0,0,88,94,3,40,20,0,89,
		90,5,65,0,0,90,91,5,7,0,0,91,94,3,32,16,0,92,94,3,14,7,0,93,80,1,0,0,0,
		93,86,1,0,0,0,93,89,1,0,0,0,93,92,1,0,0,0,94,7,1,0,0,0,95,96,5,8,0,0,96,
		97,5,65,0,0,97,99,5,9,0,0,98,100,3,10,5,0,99,98,1,0,0,0,99,100,1,0,0,0,
		100,101,1,0,0,0,101,103,5,10,0,0,102,104,3,40,20,0,103,102,1,0,0,0,103,
		104,1,0,0,0,104,105,1,0,0,0,105,109,5,2,0,0,106,108,3,2,1,0,107,106,1,
		0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,
		111,109,1,0,0,0,112,113,5,3,0,0,113,9,1,0,0,0,114,117,5,65,0,0,115,116,
		5,11,0,0,116,118,5,12,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,1,0,
		0,0,119,129,3,12,6,0,120,121,5,13,0,0,121,124,5,65,0,0,122,123,5,11,0,
		0,123,125,5,12,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,126,1,0,0,0,126,
		128,3,12,6,0,127,120,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,
		0,0,0,130,11,1,0,0,0,131,129,1,0,0,0,132,135,3,40,20,0,133,135,5,65,0,
		0,134,132,1,0,0,0,134,133,1,0,0,0,135,13,1,0,0,0,136,137,5,65,0,0,137,
		138,5,7,0,0,138,165,3,32,16,0,139,140,5,5,0,0,140,141,5,65,0,0,141,142,
		5,11,0,0,142,143,5,12,0,0,143,165,3,40,20,0,144,145,5,65,0,0,145,146,5,
		6,0,0,146,165,5,65,0,0,147,148,5,65,0,0,148,149,5,7,0,0,149,150,5,11,0,
		0,150,153,5,12,0,0,151,152,5,11,0,0,152,154,5,12,0,0,153,151,1,0,0,0,154,
		155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,158,3,
		40,20,0,158,160,5,2,0,0,159,161,3,16,8,0,160,159,1,0,0,0,160,161,1,0,0,
		0,161,162,1,0,0,0,162,163,5,3,0,0,163,165,1,0,0,0,164,136,1,0,0,0,164,
		139,1,0,0,0,164,144,1,0,0,0,164,147,1,0,0,0,165,15,1,0,0,0,166,171,3,18,
		9,0,167,168,5,13,0,0,168,170,3,18,9,0,169,167,1,0,0,0,170,173,1,0,0,0,
		171,169,1,0,0,0,171,172,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,174,176,
		5,13,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,17,1,0,0,0,177,179,5,2,0,
		0,178,180,3,16,8,0,179,178,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,
		195,5,3,0,0,182,191,5,2,0,0,183,188,3,32,16,0,184,185,5,13,0,0,185,187,
		3,32,16,0,186,184,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,
		0,0,189,192,1,0,0,0,190,188,1,0,0,0,191,183,1,0,0,0,191,192,1,0,0,0,192,
		193,1,0,0,0,193,195,5,3,0,0,194,177,1,0,0,0,194,182,1,0,0,0,195,19,1,0,
		0,0,196,197,5,14,0,0,197,198,5,65,0,0,198,199,5,15,0,0,199,203,5,2,0,0,
		200,202,3,22,11,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,
		204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,3,0,0,207,21,1,0,
		0,0,208,209,5,65,0,0,209,214,3,12,6,0,210,211,5,65,0,0,211,213,3,12,6,
		0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
		23,1,0,0,0,216,214,1,0,0,0,217,315,3,32,16,0,218,227,5,16,0,0,219,224,
		3,32,16,0,220,221,5,13,0,0,221,223,3,32,16,0,222,220,1,0,0,0,223,226,1,
		0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,
		227,219,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,315,5,10,0,0,230,234,
		5,2,0,0,231,233,3,2,1,0,232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,
		0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,315,5,3,0,0,238,
		240,5,17,0,0,239,241,5,9,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,
		0,0,0,242,244,3,32,16,0,243,245,5,10,0,0,244,243,1,0,0,0,244,245,1,0,0,
		0,245,246,1,0,0,0,246,249,3,24,12,0,247,248,5,18,0,0,248,250,3,24,12,0,
		249,247,1,0,0,0,249,250,1,0,0,0,250,315,1,0,0,0,251,253,5,19,0,0,252,254,
		5,9,0,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,257,3,32,16,
		0,256,258,5,10,0,0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,
		263,5,2,0,0,260,262,3,26,13,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,
		1,0,0,0,263,264,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,266,268,3,28,14,
		0,267,266,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,5,3,0,0,270,
		315,1,0,0,0,271,273,5,20,0,0,272,274,5,9,0,0,273,272,1,0,0,0,273,274,1,
		0,0,0,274,275,1,0,0,0,275,277,3,32,16,0,276,278,5,10,0,0,277,276,1,0,0,
		0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,3,24,12,0,280,315,1,0,0,0,281,
		283,5,20,0,0,282,284,5,9,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,
		0,0,0,285,286,3,30,15,0,286,287,3,32,16,0,287,288,5,4,0,0,288,290,3,32,
		16,0,289,291,5,10,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,
		292,293,3,24,12,0,293,315,1,0,0,0,294,296,5,20,0,0,295,297,5,9,0,0,296,
		295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,65,0,0,299,300,5,
		13,0,0,300,301,5,65,0,0,301,302,5,7,0,0,302,303,5,21,0,0,303,305,5,65,
		0,0,304,306,5,10,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,
		315,3,24,12,0,308,315,5,22,0,0,309,315,5,23,0,0,310,312,5,24,0,0,311,313,
		3,32,16,0,312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,217,1,0,
		0,0,314,218,1,0,0,0,314,230,1,0,0,0,314,238,1,0,0,0,314,251,1,0,0,0,314,
		271,1,0,0,0,314,281,1,0,0,0,314,294,1,0,0,0,314,308,1,0,0,0,314,309,1,
		0,0,0,314,310,1,0,0,0,315,25,1,0,0,0,316,317,5,25,0,0,317,318,3,32,16,
		0,318,322,5,26,0,0,319,321,3,2,1,0,320,319,1,0,0,0,321,324,1,0,0,0,322,
		320,1,0,0,0,322,323,1,0,0,0,323,27,1,0,0,0,324,322,1,0,0,0,325,326,5,27,
		0,0,326,330,5,26,0,0,327,329,3,2,1,0,328,327,1,0,0,0,329,332,1,0,0,0,330,
		328,1,0,0,0,330,331,1,0,0,0,331,29,1,0,0,0,332,330,1,0,0,0,333,334,3,6,
		3,0,334,335,5,4,0,0,335,340,1,0,0,0,336,337,3,32,16,0,337,338,5,4,0,0,
		338,340,1,0,0,0,339,333,1,0,0,0,339,336,1,0,0,0,340,31,1,0,0,0,341,342,
		6,16,-1,0,342,343,5,28,0,0,343,344,3,32,16,0,344,345,5,10,0,0,345,465,
		1,0,0,0,346,347,5,29,0,0,347,348,3,32,16,0,348,349,5,10,0,0,349,465,1,
		0,0,0,350,351,5,30,0,0,351,352,3,32,16,0,352,353,5,10,0,0,353,465,1,0,
		0,0,354,355,5,31,0,0,355,356,5,65,0,0,356,357,5,13,0,0,357,358,3,32,16,
		0,358,359,5,10,0,0,359,465,1,0,0,0,360,361,5,32,0,0,361,362,5,65,0,0,362,
		363,5,13,0,0,363,364,3,32,16,0,364,365,5,10,0,0,365,465,1,0,0,0,366,367,
		5,33,0,0,367,368,3,32,16,0,368,369,5,10,0,0,369,465,1,0,0,0,370,371,5,
		34,0,0,371,372,5,65,0,0,372,373,5,13,0,0,373,374,3,32,16,0,374,375,5,10,
		0,0,375,465,1,0,0,0,376,377,5,65,0,0,377,378,5,11,0,0,378,379,3,32,16,
		0,379,380,5,12,0,0,380,465,1,0,0,0,381,386,5,65,0,0,382,383,5,11,0,0,383,
		384,3,32,16,0,384,385,5,12,0,0,385,387,1,0,0,0,386,382,1,0,0,0,387,388,
		1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,465,1,0,0,0,390,391,5,35,0,
		0,391,465,3,32,16,25,392,393,5,36,0,0,393,465,3,32,16,23,394,395,5,65,
		0,0,395,465,7,0,0,0,396,399,5,65,0,0,397,398,5,51,0,0,398,400,5,65,0,0,
		399,397,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,403,
		1,0,0,0,403,404,5,6,0,0,404,465,3,32,16,15,405,406,5,65,0,0,406,407,7,
		1,0,0,407,465,3,32,16,14,408,409,5,65,0,0,409,410,5,11,0,0,410,411,3,32,
		16,0,411,412,5,12,0,0,412,413,5,6,0,0,413,414,3,32,16,13,414,465,1,0,0,
		0,415,420,5,65,0,0,416,417,5,11,0,0,417,418,3,32,16,0,418,419,5,12,0,0,
		419,421,1,0,0,0,420,416,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,422,423,
		1,0,0,0,423,424,1,0,0,0,424,425,5,6,0,0,425,426,3,32,16,12,426,465,1,0,
		0,0,427,428,5,11,0,0,428,429,5,12,0,0,429,430,3,40,20,0,430,431,5,2,0,
		0,431,436,3,32,16,0,432,433,5,13,0,0,433,435,3,32,16,0,434,432,1,0,0,0,
		435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,436,
		1,0,0,0,439,440,5,3,0,0,440,465,1,0,0,0,441,465,5,61,0,0,442,465,5,62,
		0,0,443,465,5,64,0,0,444,465,5,63,0,0,445,465,5,60,0,0,446,465,5,54,0,
		0,447,465,5,65,0,0,448,451,5,65,0,0,449,450,5,51,0,0,450,452,5,65,0,0,
		451,449,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,465,
		1,0,0,0,455,456,5,9,0,0,456,457,3,32,16,0,457,458,5,10,0,0,458,465,1,0,
		0,0,459,460,5,65,0,0,460,461,5,2,0,0,461,462,3,34,17,0,462,463,5,3,0,0,
		463,465,1,0,0,0,464,341,1,0,0,0,464,346,1,0,0,0,464,350,1,0,0,0,464,354,
		1,0,0,0,464,360,1,0,0,0,464,366,1,0,0,0,464,370,1,0,0,0,464,376,1,0,0,
		0,464,381,1,0,0,0,464,390,1,0,0,0,464,392,1,0,0,0,464,394,1,0,0,0,464,
		396,1,0,0,0,464,405,1,0,0,0,464,408,1,0,0,0,464,415,1,0,0,0,464,427,1,
		0,0,0,464,441,1,0,0,0,464,442,1,0,0,0,464,443,1,0,0,0,464,444,1,0,0,0,
		464,445,1,0,0,0,464,446,1,0,0,0,464,447,1,0,0,0,464,448,1,0,0,0,464,455,
		1,0,0,0,464,459,1,0,0,0,465,492,1,0,0,0,466,467,10,22,0,0,467,468,7,2,
		0,0,468,491,3,32,16,23,469,470,10,21,0,0,470,471,7,3,0,0,471,491,3,32,
		16,22,472,473,10,20,0,0,473,474,7,4,0,0,474,491,3,32,16,21,475,476,10,
		19,0,0,476,477,7,5,0,0,477,491,3,32,16,20,478,479,10,18,0,0,479,480,5,
		47,0,0,480,491,3,32,16,19,481,482,10,17,0,0,482,483,5,48,0,0,483,491,3,
		32,16,18,484,486,10,24,0,0,485,487,3,36,18,0,486,485,1,0,0,0,487,488,1,
		0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,466,1,0,0,0,
		490,469,1,0,0,0,490,472,1,0,0,0,490,475,1,0,0,0,490,478,1,0,0,0,490,481,
		1,0,0,0,490,484,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,
		0,493,33,1,0,0,0,494,492,1,0,0,0,495,496,5,65,0,0,496,497,5,26,0,0,497,
		504,3,32,16,0,498,499,5,13,0,0,499,500,5,65,0,0,500,501,5,26,0,0,501,503,
		3,32,16,0,502,498,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,
		0,0,505,35,1,0,0,0,506,504,1,0,0,0,507,509,5,9,0,0,508,510,3,38,19,0,509,
		508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,5,10,0,0,512,37,1,
		0,0,0,513,518,3,32,16,0,514,515,5,13,0,0,515,517,3,32,16,0,516,514,1,0,
		0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,39,1,0,0,0,520,
		518,1,0,0,0,521,522,7,6,0,0,522,41,1,0,0,0,60,45,48,55,62,68,70,74,78,
		93,99,103,109,117,124,129,134,155,160,164,171,175,179,188,191,194,203,
		214,224,227,234,240,244,249,253,257,263,267,273,277,283,290,296,305,312,
		314,322,330,339,388,401,422,436,453,464,488,490,492,504,509,518
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
