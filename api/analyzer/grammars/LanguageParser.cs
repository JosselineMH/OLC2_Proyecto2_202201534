//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, INT=57, BOOL=58, FLOAT=59, STRING=60, 
		RUNE=61, ID=62, WS=63, COMENTARIOLINEA=64, COMENTARIOMULTIL=65;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_dclFuera = 2, RULE_declaracionVariable = 3, 
		RULE_declaracionFuncForanea = 4, RULE_parametros = 5, RULE_tipoFunc = 6, 
		RULE_slice = 7, RULE_elementosSlice = 8, RULE_elementoSlice = 9, RULE_sentencia = 10, 
		RULE_stmtCase = 11, RULE_stmtDefault = 12, RULE_forInit = 13, RULE_expresion = 14, 
		RULE_atributoInstancia = 15, RULE_call = 16, RULE_args = 17, RULE_tipoDeclaracion = 18;
	public static readonly string[] ruleNames = {
		"program", "dcl", "dclFuera", "declaracionVariable", "declaracionFuncForanea", 
		"parametros", "tipoFunc", "slice", "elementosSlice", "elementoSlice", 
		"sentencia", "stmtCase", "stmtDefault", "forInit", "expresion", "atributoInstancia", 
		"call", "args", "tipoDeclaracion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func main()'", "'{'", "'}'", "';'", "'var'", "'='", "':='", "'func'", 
		"'('", "')'", "'['", "']'", "','", "'fmt.Println('", "'if'", "'else'", 
		"'switch'", "'for'", "'range'", "'break'", "'continue'", "'return'", "'case'", 
		"':'", "'default'", "'strconv.Atoi('", "'strconv.ParseFloat('", "'reflect.TypeOf('", 
		"'slices.Index('", "'strings.Join('", "'len('", "'append('", "'-'", "'!'", 
		"'*'", "'/'", "'%'", "'+'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'&&'", "'||'", "'++'", "'--'", "'+='", "'-='", "'nil'", "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "INT", "BOOL", "FLOAT", 
		"STRING", "RUNE", "ID", "WS", "COMENTARIOLINEA", "COMENTARIOMULTIL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclFueraContext[] dclFuera() {
			return GetRuleContexts<DclFueraContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclFueraContext dclFuera(int i) {
			return GetRuleContext<DclFueraContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611686018427388192L) != 0)) {
				{
				{
				State = 38;
				dclFuera();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(T__0);
			State = 45;
			Match(T__1);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682893019940L) != 0)) {
				{
				{
				State = 46;
				dcl();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionFuncForaneaContext declaracionFuncForanea() {
			return GetRuleContext<DeclaracionFuncForaneaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				declaracionVariable();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 55;
					Match(T__3);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				declaracionFuncForanea();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				sentencia();
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 60;
					Match(T__3);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclFueraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionFuncForaneaContext declaracionFuncForanea() {
			return GetRuleContext<DeclaracionFuncForaneaContext>(0);
		}
		public DclFueraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dclFuera; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDclFuera(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclFueraContext dclFuera() {
		DclFueraContext _localctx = new DclFueraContext(Context, State);
		EnterRule(_localctx, 4, RULE_dclFuera);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				declaracionVariable();
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 66;
					Match(T__3);
					}
				}

				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				declaracionFuncForanea();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionVariableContext : ParserRuleContext {
		public DeclaracionVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionVariable; } }
	 
		public DeclaracionVariableContext() { }
		public virtual void CopyFrom(DeclaracionVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionSliceContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceContext slice() {
			return GetRuleContext<SliceContext>(0);
		}
		public DeclaracionSliceContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionPorDefectoContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		public DeclaracionPorDefectoContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionPorDefecto(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionExplicitaContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionExplicitaContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionExplicita(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionImplicitaContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionImplicitaContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionImplicita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionVariableContext declaracionVariable() {
		DeclaracionVariableContext _localctx = new DeclaracionVariableContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaracionVariable);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new DeclaracionExplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				Match(T__4);
				State = 73;
				Match(ID);
				State = 74;
				tipoDeclaracion();
				State = 75;
				Match(T__5);
				State = 76;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new DeclaracionPorDefectoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(T__4);
				State = 79;
				Match(ID);
				State = 80;
				tipoDeclaracion();
				}
				break;
			case 3:
				_localctx = new DeclaracionImplicitaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 81;
				Match(ID);
				State = 82;
				Match(T__6);
				State = 83;
				expresion(0);
				}
				break;
			case 4:
				_localctx = new DeclaracionSliceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 84;
				slice();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionFuncForaneaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public DeclaracionFuncForaneaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionFuncForanea; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionFuncForanea(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionFuncForaneaContext declaracionFuncForanea() {
		DeclaracionFuncForaneaContext _localctx = new DeclaracionFuncForaneaContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaracionFuncForanea);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__7);
			State = 88;
			Match(ID);
			State = 89;
			Match(T__8);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 90;
				parametros();
				}
			}

			State = 93;
			Match(T__9);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611588448485376L) != 0)) {
				{
				State = 94;
				tipoDeclaracion();
				}
			}

			State = 97;
			Match(T__1);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682893019940L) != 0)) {
				{
				{
				State = 98;
				dcl();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoFuncContext[] tipoFunc() {
			return GetRuleContexts<TipoFuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoFuncContext tipoFunc(int i) {
			return GetRuleContext<TipoFuncContext>(i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 10, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(ID);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 107;
				Match(T__10);
				State = 108;
				Match(T__11);
				}
			}

			State = 111;
			tipoFunc();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 112;
				Match(T__12);
				State = 113;
				Match(ID);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 114;
					Match(T__10);
					State = 115;
					Match(T__11);
					}
				}

				State = 118;
				tipoFunc();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public TipoFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoFuncContext tipoFunc() {
		TipoFuncContext _localctx = new TipoFuncContext(Context, State);
		EnterRule(_localctx, 12, RULE_tipoFunc);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				tipoDeclaracion();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceContext : ParserRuleContext {
		public SliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice; } }
	 
		public SliceContext() { }
		public virtual void CopyFrom(SliceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionSliceVacioContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		public DeclaracionSliceVacioContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceVacio(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionSliceValoresContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public DeclaracionSliceValoresContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceValores(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionSliceCopiaContext : SliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		public DeclaracionSliceCopiaContext(SliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceCopia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceContext slice() {
		SliceContext _localctx = new SliceContext(Context, State);
		EnterRule(_localctx, 14, RULE_slice);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new DeclaracionSliceValoresContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(ID);
				State = 129;
				Match(T__6);
				State = 130;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new DeclaracionSliceVacioContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				Match(T__4);
				State = 132;
				Match(ID);
				State = 133;
				Match(T__10);
				State = 134;
				Match(T__11);
				State = 135;
				tipoDeclaracion();
				}
				break;
			case 3:
				_localctx = new DeclaracionSliceCopiaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				Match(ID);
				State = 137;
				Match(T__5);
				State = 138;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementosSliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementoSliceContext[] elementoSlice() {
			return GetRuleContexts<ElementoSliceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementoSliceContext elementoSlice(int i) {
			return GetRuleContext<ElementoSliceContext>(i);
		}
		public ElementosSliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementosSlice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementosSlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementosSliceContext elementosSlice() {
		ElementosSliceContext _localctx = new ElementosSliceContext(Context, State);
		EnterRule(_localctx, 16, RULE_elementosSlice);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			elementoSlice();
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 142;
					Match(T__12);
					State = 143;
					elementoSlice();
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 149;
				Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementoSliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementosSliceContext elementosSlice() {
			return GetRuleContext<ElementosSliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ElementoSliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementoSlice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementoSlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementoSliceContext elementoSlice() {
		ElementoSliceContext _localctx = new ElementoSliceContext(Context, State);
		EnterRule(_localctx, 18, RULE_elementoSlice);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				Match(T__1);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 153;
					elementosSlice();
					}
				}

				State = 156;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				Match(T__1);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682885237248L) != 0)) {
					{
					State = 158;
					expresion(0);
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 159;
						Match(T__12);
						State = 160;
						expresion(0);
						}
						}
						State = 165;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 168;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenciaContext : ParserRuleContext {
		public SentenciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentencia; } }
	 
		public SentenciaContext() { }
		public virtual void CopyFrom(SentenciaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinueStmtContext : SentenciaContext {
		public ContinueStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtCaseContext[] stmtCase() {
			return GetRuleContexts<StmtCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtCaseContext stmtCase(int i) {
			return GetRuleContext<StmtCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtDefaultContext stmtDefault() {
			return GetRuleContext<StmtDefaultContext>(0);
		}
		public SwitchStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public PrintStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext[] sentencia() {
			return GetRuleContexts<SentenciaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia(int i) {
			return GetRuleContext<SentenciaContext>(i);
		}
		public IfStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ExprStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : SentenciaContext {
		public BreakStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForRangeStmtContext : SentenciaContext {
		public IToken indice;
		public IToken valor;
		public IToken ident;
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		public ForRangeStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForWhileStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public ForWhileStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciaContext sentencia() {
			return GetRuleContext<SentenciaContext>(0);
		}
		public ForStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : SentenciaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ReturnStmtContext(SentenciaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciaContext sentencia() {
		SentenciaContext _localctx = new SentenciaContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentencia);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				expresion(0);
				}
				break;
			case 2:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				Match(T__13);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682885237248L) != 0)) {
					{
					State = 173;
					expresion(0);
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__12) {
						{
						{
						State = 174;
						Match(T__12);
						State = 175;
						expresion(0);
						}
						}
						State = 180;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 183;
				Match(T__9);
				}
				break;
			case 3:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				Match(T__1);
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682893019940L) != 0)) {
					{
					{
					State = 185;
					dcl();
					}
					}
					State = 190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 191;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 192;
				Match(T__14);
				State = 194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 193;
					Match(T__8);
					}
					break;
				}
				State = 196;
				expresion(0);
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 197;
					Match(T__9);
					}
				}

				State = 200;
				sentencia();
				State = 203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 201;
					Match(T__15);
					State = 202;
					sentencia();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				Match(T__16);
				State = 207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 206;
					Match(T__8);
					}
					break;
				}
				State = 209;
				expresion(0);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 210;
					Match(T__9);
					}
				}

				State = 213;
				Match(T__1);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__22) {
					{
					{
					State = 214;
					stmtCase();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 220;
					stmtDefault();
					}
				}

				State = 223;
				Match(T__2);
				}
				break;
			case 6:
				_localctx = new ForWhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 225;
				Match(T__17);
				State = 227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 226;
					Match(T__8);
					}
					break;
				}
				State = 229;
				expresion(0);
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 230;
					Match(T__9);
					}
				}

				State = 233;
				sentencia();
				}
				break;
			case 7:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 235;
				Match(T__17);
				State = 237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 236;
					Match(T__8);
					}
					break;
				}
				State = 239;
				forInit();
				State = 240;
				expresion(0);
				State = 241;
				Match(T__3);
				State = 242;
				expresion(0);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 243;
					Match(T__9);
					}
				}

				State = 246;
				sentencia();
				}
				break;
			case 8:
				_localctx = new ForRangeStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 248;
				Match(T__17);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 249;
					Match(T__8);
					}
				}

				State = 252;
				((ForRangeStmtContext)_localctx).indice = Match(ID);
				State = 253;
				Match(T__12);
				State = 254;
				((ForRangeStmtContext)_localctx).valor = Match(ID);
				State = 255;
				Match(T__6);
				State = 256;
				Match(T__18);
				State = 257;
				((ForRangeStmtContext)_localctx).ident = Match(ID);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 258;
					Match(T__9);
					}
				}

				State = 261;
				sentencia();
				}
				break;
			case 9:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 262;
				Match(T__19);
				}
				break;
			case 10:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 263;
				Match(T__20);
				}
				break;
			case 11:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 264;
				Match(T__21);
				State = 266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 265;
					expresion(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public StmtCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtCaseContext stmtCase() {
		StmtCaseContext _localctx = new StmtCaseContext(Context, State);
		EnterRule(_localctx, 22, RULE_stmtCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(T__22);
			State = 271;
			expresion(0);
			State = 272;
			Match(T__23);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682893019940L) != 0)) {
				{
				{
				State = 273;
				dcl();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public StmtDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtDefaultContext stmtDefault() {
		StmtDefaultContext _localctx = new StmtDefaultContext(Context, State);
		EnterRule(_localctx, 24, RULE_stmtDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__24);
			State = 280;
			Match(T__23);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682893019940L) != 0)) {
				{
				{
				State = 281;
				dcl();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 26, RULE_forInit);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				declaracionVariable();
				State = 288;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				expresion(0);
				State = 291;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignSliceContext : ExpresionContext {
		public ExpresionContext indice;
		public ExpresionContext valor;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AssignSliceContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalleeContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CalleeContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceLenFuncContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceLenFuncContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLenFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceLiteralContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoDeclaracionContext tipoDeclaracion() {
			return GetRuleContext<TipoDeclaracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public SliceLiteralContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ParensContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicalOrContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public LogicalNotContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public MulDivModContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmebbedFuncAtoiContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public EmebbedFuncAtoiContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmebbedFuncAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public NumberContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LogicalAndContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public EqualityContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceStringFuncJoinContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceStringFuncJoinContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceStringFuncJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BooleanContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAccessContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceAccessContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AddSubContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVarContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AssignVarContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public RelationalContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmebbedFuncParseFloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public EmebbedFuncParseFloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmebbedFuncParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceFuncIndexContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceFuncIndexContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceFuncIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExpresionContext {
		public NilContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAppendFuncContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public SliceAppendFuncContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAppendFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmebbedFuncTypeOfContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public EmebbedFuncTypeOfContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmebbedFuncTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NegateContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementDecrementContext : ExpresionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IncrementDecrementContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExpresionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExpresionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				_localctx = new EmebbedFuncAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 296;
				Match(T__25);
				State = 297;
				expresion(0);
				State = 298;
				Match(T__9);
				}
				break;
			case 2:
				{
				_localctx = new EmebbedFuncParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 300;
				Match(T__26);
				State = 301;
				expresion(0);
				State = 302;
				Match(T__9);
				}
				break;
			case 3:
				{
				_localctx = new EmebbedFuncTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 304;
				Match(T__27);
				State = 305;
				expresion(0);
				State = 306;
				Match(T__9);
				}
				break;
			case 4:
				{
				_localctx = new SliceFuncIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 308;
				Match(T__28);
				State = 309;
				Match(ID);
				State = 310;
				Match(T__12);
				State = 311;
				expresion(0);
				State = 312;
				Match(T__9);
				}
				break;
			case 5:
				{
				_localctx = new SliceStringFuncJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 314;
				Match(T__29);
				State = 315;
				Match(ID);
				State = 316;
				Match(T__12);
				State = 317;
				expresion(0);
				State = 318;
				Match(T__9);
				}
				break;
			case 6:
				{
				_localctx = new SliceLenFuncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 320;
				Match(T__30);
				State = 321;
				expresion(0);
				State = 322;
				Match(T__9);
				}
				break;
			case 7:
				{
				_localctx = new SliceAppendFuncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324;
				Match(T__31);
				State = 325;
				Match(ID);
				State = 326;
				Match(T__12);
				State = 327;
				expresion(0);
				State = 328;
				Match(T__9);
				}
				break;
			case 8:
				{
				_localctx = new SliceAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 330;
				Match(ID);
				State = 331;
				Match(T__10);
				State = 332;
				expresion(0);
				State = 333;
				Match(T__11);
				}
				break;
			case 9:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				Match(T__32);
				State = 336;
				expresion(21);
				}
				break;
			case 10:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				Match(T__33);
				State = 338;
				expresion(19);
				}
				break;
			case 11:
				{
				_localctx = new IncrementDecrementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 339;
				Match(ID);
				State = 340;
				((IncrementDecrementContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__46 || _la==T__47) ) {
					((IncrementDecrementContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				{
				_localctx = new AssignVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 341;
				Match(ID);
				State = 342;
				((AssignVarContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1688849860264000L) != 0)) ) {
					((AssignVarContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 343;
				expresion(11);
				}
				break;
			case 13:
				{
				_localctx = new AssignSliceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 344;
				Match(ID);
				State = 345;
				Match(T__10);
				State = 346;
				((AssignSliceContext)_localctx).indice = expresion(0);
				State = 347;
				Match(T__11);
				State = 348;
				Match(T__5);
				State = 349;
				((AssignSliceContext)_localctx).valor = expresion(10);
				}
				break;
			case 14:
				{
				_localctx = new SliceLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 351;
				Match(T__10);
				State = 352;
				Match(T__11);
				State = 353;
				tipoDeclaracion();
				State = 354;
				Match(T__1);
				State = 355;
				expresion(0);
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__12) {
					{
					{
					State = 356;
					Match(T__12);
					State = 357;
					expresion(0);
					}
					}
					State = 362;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 363;
				Match(T__2);
				}
				break;
			case 15:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(BOOL);
				}
				break;
			case 16:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				Match(FLOAT);
				}
				break;
			case 17:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 367;
				Match(RUNE);
				}
				break;
			case 18:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368;
				Match(STRING);
				}
				break;
			case 19:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 369;
				Match(INT);
				}
				break;
			case 20:
				{
				_localctx = new NilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				Match(T__50);
				}
				break;
			case 21:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 371;
				Match(ID);
				}
				break;
			case 22:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 372;
				Match(T__8);
				State = 373;
				expresion(0);
				State = 374;
				Match(T__9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 404;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 402;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 378;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 379;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 380;
						expresion(19);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 381;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 382;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__32 || _la==T__37) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 383;
						expresion(18);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 384;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 385;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8246337208320L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 386;
						expresion(17);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 387;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 388;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__42 || _la==T__43) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 389;
						expresion(16);
						}
						break;
					case 5:
						{
						_localctx = new LogicalAndContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 390;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 391;
						((LogicalAndContext)_localctx).op = Match(T__44);
						State = 392;
						expresion(15);
						}
						break;
					case 6:
						{
						_localctx = new LogicalOrContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 393;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 394;
						((LogicalOrContext)_localctx).op = Match(T__45);
						State = 395;
						expresion(14);
						}
						break;
					case 7:
						{
						_localctx = new CalleeContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 396;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 398;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 397;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 400;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtributoInstanciaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public AtributoInstanciaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atributoInstancia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtributoInstancia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtributoInstanciaContext atributoInstancia() {
		AtributoInstanciaContext _localctx = new AtributoInstanciaContext(Context, State);
		EnterRule(_localctx, 30, RULE_atributoInstancia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(ID);
			State = 408;
			Match(T__23);
			State = 409;
			expresion(0);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 410;
				Match(T__12);
				State = 411;
				Match(ID);
				State = 412;
				Match(T__23);
				State = 413;
				expresion(0);
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 32, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(T__8);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9081508682885237248L) != 0)) {
				{
				State = 420;
				args();
				}
			}

			State = 423;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			expresion(0);
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 426;
				Match(T__12);
				State = 427;
				expresion(0);
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoDeclaracionContext : ParserRuleContext {
		public TipoDeclaracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoDeclaracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoDeclaracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoDeclaracionContext tipoDeclaracion() {
		TipoDeclaracionContext _localctx = new TipoDeclaracionContext(Context, State);
		EnterRule(_localctx, 36, RULE_tipoDeclaracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611588448485376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 20);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,65,436,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,5,0,40,8,0,10,0,12,0,43,9,
		0,1,0,1,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,3,1,57,8,1,1,
		1,1,1,1,1,3,1,62,8,1,3,1,64,8,1,1,2,1,2,3,2,68,8,2,1,2,3,2,71,8,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,86,8,3,1,4,1,4,1,4,
		1,4,3,4,92,8,4,1,4,1,4,3,4,96,8,4,1,4,1,4,5,4,100,8,4,10,4,12,4,103,9,
		4,1,4,1,4,1,5,1,5,1,5,3,5,110,8,5,1,5,1,5,1,5,1,5,1,5,3,5,117,8,5,1,5,
		5,5,120,8,5,10,5,12,5,123,9,5,1,6,1,6,3,6,127,8,6,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,3,7,140,8,7,1,8,1,8,1,8,5,8,145,8,8,10,8,12,8,
		148,9,8,1,8,3,8,151,8,8,1,9,1,9,3,9,155,8,9,1,9,1,9,1,9,1,9,1,9,5,9,162,
		8,9,10,9,12,9,165,9,9,3,9,167,8,9,1,9,3,9,170,8,9,1,10,1,10,1,10,1,10,
		1,10,5,10,177,8,10,10,10,12,10,180,9,10,3,10,182,8,10,1,10,1,10,1,10,5,
		10,187,8,10,10,10,12,10,190,9,10,1,10,1,10,1,10,3,10,195,8,10,1,10,1,10,
		3,10,199,8,10,1,10,1,10,1,10,3,10,204,8,10,1,10,1,10,3,10,208,8,10,1,10,
		1,10,3,10,212,8,10,1,10,1,10,5,10,216,8,10,10,10,12,10,219,9,10,1,10,3,
		10,222,8,10,1,10,1,10,1,10,1,10,3,10,228,8,10,1,10,1,10,3,10,232,8,10,
		1,10,1,10,1,10,1,10,3,10,238,8,10,1,10,1,10,1,10,1,10,1,10,3,10,245,8,
		10,1,10,1,10,1,10,1,10,3,10,251,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		3,10,260,8,10,1,10,1,10,1,10,1,10,1,10,3,10,267,8,10,3,10,269,8,10,1,11,
		1,11,1,11,1,11,5,11,275,8,11,10,11,12,11,278,9,11,1,12,1,12,1,12,5,12,
		283,8,12,10,12,12,12,286,9,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,294,8,
		13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,359,8,14,10,14,12,14,362,9,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
		14,377,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,4,14,399,8,14,11,14,12,14,400,
		5,14,403,8,14,10,14,12,14,406,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		5,15,415,8,15,10,15,12,15,418,9,15,1,16,1,16,3,16,422,8,16,1,16,1,16,1,
		17,1,17,1,17,5,17,429,8,17,10,17,12,17,432,9,17,1,18,1,18,1,18,0,1,28,
		19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,7,1,0,47,48,2,
		0,6,6,49,50,1,0,35,37,2,0,33,33,38,38,1,0,39,42,1,0,43,44,1,0,52,56,505,
		0,41,1,0,0,0,2,63,1,0,0,0,4,70,1,0,0,0,6,85,1,0,0,0,8,87,1,0,0,0,10,106,
		1,0,0,0,12,126,1,0,0,0,14,139,1,0,0,0,16,141,1,0,0,0,18,169,1,0,0,0,20,
		268,1,0,0,0,22,270,1,0,0,0,24,279,1,0,0,0,26,293,1,0,0,0,28,376,1,0,0,
		0,30,407,1,0,0,0,32,419,1,0,0,0,34,425,1,0,0,0,36,433,1,0,0,0,38,40,3,
		4,2,0,39,38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,
		0,0,0,43,41,1,0,0,0,44,45,5,1,0,0,45,49,5,2,0,0,46,48,3,2,1,0,47,46,1,
		0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,52,1,0,0,0,51,49,1,
		0,0,0,52,53,5,3,0,0,53,1,1,0,0,0,54,56,3,6,3,0,55,57,5,4,0,0,56,55,1,0,
		0,0,56,57,1,0,0,0,57,64,1,0,0,0,58,64,3,8,4,0,59,61,3,20,10,0,60,62,5,
		4,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,54,1,0,0,0,63,58,1,
		0,0,0,63,59,1,0,0,0,64,3,1,0,0,0,65,67,3,6,3,0,66,68,5,4,0,0,67,66,1,0,
		0,0,67,68,1,0,0,0,68,71,1,0,0,0,69,71,3,8,4,0,70,65,1,0,0,0,70,69,1,0,
		0,0,71,5,1,0,0,0,72,73,5,5,0,0,73,74,5,62,0,0,74,75,3,36,18,0,75,76,5,
		6,0,0,76,77,3,28,14,0,77,86,1,0,0,0,78,79,5,5,0,0,79,80,5,62,0,0,80,86,
		3,36,18,0,81,82,5,62,0,0,82,83,5,7,0,0,83,86,3,28,14,0,84,86,3,14,7,0,
		85,72,1,0,0,0,85,78,1,0,0,0,85,81,1,0,0,0,85,84,1,0,0,0,86,7,1,0,0,0,87,
		88,5,8,0,0,88,89,5,62,0,0,89,91,5,9,0,0,90,92,3,10,5,0,91,90,1,0,0,0,91,
		92,1,0,0,0,92,93,1,0,0,0,93,95,5,10,0,0,94,96,3,36,18,0,95,94,1,0,0,0,
		95,96,1,0,0,0,96,97,1,0,0,0,97,101,5,2,0,0,98,100,3,2,1,0,99,98,1,0,0,
		0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,
		1,0,0,0,104,105,5,3,0,0,105,9,1,0,0,0,106,109,5,62,0,0,107,108,5,11,0,
		0,108,110,5,12,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,
		121,3,12,6,0,112,113,5,13,0,0,113,116,5,62,0,0,114,115,5,11,0,0,115,117,
		5,12,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,120,3,12,
		6,0,119,112,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,
		11,1,0,0,0,123,121,1,0,0,0,124,127,3,36,18,0,125,127,5,62,0,0,126,124,
		1,0,0,0,126,125,1,0,0,0,127,13,1,0,0,0,128,129,5,62,0,0,129,130,5,7,0,
		0,130,140,3,28,14,0,131,132,5,5,0,0,132,133,5,62,0,0,133,134,5,11,0,0,
		134,135,5,12,0,0,135,140,3,36,18,0,136,137,5,62,0,0,137,138,5,6,0,0,138,
		140,5,62,0,0,139,128,1,0,0,0,139,131,1,0,0,0,139,136,1,0,0,0,140,15,1,
		0,0,0,141,146,3,18,9,0,142,143,5,13,0,0,143,145,3,18,9,0,144,142,1,0,0,
		0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,150,1,0,0,0,148,
		146,1,0,0,0,149,151,5,13,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,17,1,
		0,0,0,152,154,5,2,0,0,153,155,3,16,8,0,154,153,1,0,0,0,154,155,1,0,0,0,
		155,156,1,0,0,0,156,170,5,3,0,0,157,166,5,2,0,0,158,163,3,28,14,0,159,
		160,5,13,0,0,160,162,3,28,14,0,161,159,1,0,0,0,162,165,1,0,0,0,163,161,
		1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,166,158,1,0,0,
		0,166,167,1,0,0,0,167,168,1,0,0,0,168,170,5,3,0,0,169,152,1,0,0,0,169,
		157,1,0,0,0,170,19,1,0,0,0,171,269,3,28,14,0,172,181,5,14,0,0,173,178,
		3,28,14,0,174,175,5,13,0,0,175,177,3,28,14,0,176,174,1,0,0,0,177,180,1,
		0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,
		181,173,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,269,5,10,0,0,184,188,
		5,2,0,0,185,187,3,2,1,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,
		0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,269,5,3,0,0,192,
		194,5,15,0,0,193,195,5,9,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,
		0,0,0,196,198,3,28,14,0,197,199,5,10,0,0,198,197,1,0,0,0,198,199,1,0,0,
		0,199,200,1,0,0,0,200,203,3,20,10,0,201,202,5,16,0,0,202,204,3,20,10,0,
		203,201,1,0,0,0,203,204,1,0,0,0,204,269,1,0,0,0,205,207,5,17,0,0,206,208,
		5,9,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,211,3,28,14,
		0,210,212,5,10,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,
		217,5,2,0,0,214,216,3,22,11,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,
		1,0,0,0,217,218,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,220,222,3,24,12,
		0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,3,0,0,224,
		269,1,0,0,0,225,227,5,18,0,0,226,228,5,9,0,0,227,226,1,0,0,0,227,228,1,
		0,0,0,228,229,1,0,0,0,229,231,3,28,14,0,230,232,5,10,0,0,231,230,1,0,0,
		0,231,232,1,0,0,0,232,233,1,0,0,0,233,234,3,20,10,0,234,269,1,0,0,0,235,
		237,5,18,0,0,236,238,5,9,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,
		0,0,0,239,240,3,26,13,0,240,241,3,28,14,0,241,242,5,4,0,0,242,244,3,28,
		14,0,243,245,5,10,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,
		246,247,3,20,10,0,247,269,1,0,0,0,248,250,5,18,0,0,249,251,5,9,0,0,250,
		249,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,62,0,0,253,254,5,
		13,0,0,254,255,5,62,0,0,255,256,5,7,0,0,256,257,5,19,0,0,257,259,5,62,
		0,0,258,260,5,10,0,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,
		269,3,20,10,0,262,269,5,20,0,0,263,269,5,21,0,0,264,266,5,22,0,0,265,267,
		3,28,14,0,266,265,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,171,1,0,
		0,0,268,172,1,0,0,0,268,184,1,0,0,0,268,192,1,0,0,0,268,205,1,0,0,0,268,
		225,1,0,0,0,268,235,1,0,0,0,268,248,1,0,0,0,268,262,1,0,0,0,268,263,1,
		0,0,0,268,264,1,0,0,0,269,21,1,0,0,0,270,271,5,23,0,0,271,272,3,28,14,
		0,272,276,5,24,0,0,273,275,3,2,1,0,274,273,1,0,0,0,275,278,1,0,0,0,276,
		274,1,0,0,0,276,277,1,0,0,0,277,23,1,0,0,0,278,276,1,0,0,0,279,280,5,25,
		0,0,280,284,5,24,0,0,281,283,3,2,1,0,282,281,1,0,0,0,283,286,1,0,0,0,284,
		282,1,0,0,0,284,285,1,0,0,0,285,25,1,0,0,0,286,284,1,0,0,0,287,288,3,6,
		3,0,288,289,5,4,0,0,289,294,1,0,0,0,290,291,3,28,14,0,291,292,5,4,0,0,
		292,294,1,0,0,0,293,287,1,0,0,0,293,290,1,0,0,0,294,27,1,0,0,0,295,296,
		6,14,-1,0,296,297,5,26,0,0,297,298,3,28,14,0,298,299,5,10,0,0,299,377,
		1,0,0,0,300,301,5,27,0,0,301,302,3,28,14,0,302,303,5,10,0,0,303,377,1,
		0,0,0,304,305,5,28,0,0,305,306,3,28,14,0,306,307,5,10,0,0,307,377,1,0,
		0,0,308,309,5,29,0,0,309,310,5,62,0,0,310,311,5,13,0,0,311,312,3,28,14,
		0,312,313,5,10,0,0,313,377,1,0,0,0,314,315,5,30,0,0,315,316,5,62,0,0,316,
		317,5,13,0,0,317,318,3,28,14,0,318,319,5,10,0,0,319,377,1,0,0,0,320,321,
		5,31,0,0,321,322,3,28,14,0,322,323,5,10,0,0,323,377,1,0,0,0,324,325,5,
		32,0,0,325,326,5,62,0,0,326,327,5,13,0,0,327,328,3,28,14,0,328,329,5,10,
		0,0,329,377,1,0,0,0,330,331,5,62,0,0,331,332,5,11,0,0,332,333,3,28,14,
		0,333,334,5,12,0,0,334,377,1,0,0,0,335,336,5,33,0,0,336,377,3,28,14,21,
		337,338,5,34,0,0,338,377,3,28,14,19,339,340,5,62,0,0,340,377,7,0,0,0,341,
		342,5,62,0,0,342,343,7,1,0,0,343,377,3,28,14,11,344,345,5,62,0,0,345,346,
		5,11,0,0,346,347,3,28,14,0,347,348,5,12,0,0,348,349,5,6,0,0,349,350,3,
		28,14,10,350,377,1,0,0,0,351,352,5,11,0,0,352,353,5,12,0,0,353,354,3,36,
		18,0,354,355,5,2,0,0,355,360,3,28,14,0,356,357,5,13,0,0,357,359,3,28,14,
		0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,
		363,1,0,0,0,362,360,1,0,0,0,363,364,5,3,0,0,364,377,1,0,0,0,365,377,5,
		58,0,0,366,377,5,59,0,0,367,377,5,61,0,0,368,377,5,60,0,0,369,377,5,57,
		0,0,370,377,5,51,0,0,371,377,5,62,0,0,372,373,5,9,0,0,373,374,3,28,14,
		0,374,375,5,10,0,0,375,377,1,0,0,0,376,295,1,0,0,0,376,300,1,0,0,0,376,
		304,1,0,0,0,376,308,1,0,0,0,376,314,1,0,0,0,376,320,1,0,0,0,376,324,1,
		0,0,0,376,330,1,0,0,0,376,335,1,0,0,0,376,337,1,0,0,0,376,339,1,0,0,0,
		376,341,1,0,0,0,376,344,1,0,0,0,376,351,1,0,0,0,376,365,1,0,0,0,376,366,
		1,0,0,0,376,367,1,0,0,0,376,368,1,0,0,0,376,369,1,0,0,0,376,370,1,0,0,
		0,376,371,1,0,0,0,376,372,1,0,0,0,377,404,1,0,0,0,378,379,10,18,0,0,379,
		380,7,2,0,0,380,403,3,28,14,19,381,382,10,17,0,0,382,383,7,3,0,0,383,403,
		3,28,14,18,384,385,10,16,0,0,385,386,7,4,0,0,386,403,3,28,14,17,387,388,
		10,15,0,0,388,389,7,5,0,0,389,403,3,28,14,16,390,391,10,14,0,0,391,392,
		5,45,0,0,392,403,3,28,14,15,393,394,10,13,0,0,394,395,5,46,0,0,395,403,
		3,28,14,14,396,398,10,20,0,0,397,399,3,32,16,0,398,397,1,0,0,0,399,400,
		1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,378,1,0,0,
		0,402,381,1,0,0,0,402,384,1,0,0,0,402,387,1,0,0,0,402,390,1,0,0,0,402,
		393,1,0,0,0,402,396,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,
		0,0,0,405,29,1,0,0,0,406,404,1,0,0,0,407,408,5,62,0,0,408,409,5,24,0,0,
		409,416,3,28,14,0,410,411,5,13,0,0,411,412,5,62,0,0,412,413,5,24,0,0,413,
		415,3,28,14,0,414,410,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,
		1,0,0,0,417,31,1,0,0,0,418,416,1,0,0,0,419,421,5,9,0,0,420,422,3,34,17,
		0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,424,5,10,0,0,424,
		33,1,0,0,0,425,430,3,28,14,0,426,427,5,13,0,0,427,429,3,28,14,0,428,426,
		1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,35,1,0,0,0,
		432,430,1,0,0,0,433,434,7,6,0,0,434,37,1,0,0,0,51,41,49,56,61,63,67,70,
		85,91,95,101,109,116,121,126,139,146,150,154,163,166,169,178,181,188,194,
		198,203,207,211,217,221,227,231,237,244,250,259,266,268,276,284,293,360,
		376,400,402,404,416,421,430
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
